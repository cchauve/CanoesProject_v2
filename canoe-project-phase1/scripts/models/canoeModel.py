import scripts.BezierSurface as bs

def GetCanoe(scale, canoe_type, resolution):
    if   (canoe_type == 1):
        P, V, U = GetCanoeNootkan()
    elif (canoe_type == 2):
        P, V, U = GetCanoeHaida()
    elif (canoe_type == 3):
        P, V, U = GetCanoeKutenai()
    else:
        P, V, U = GetCanoeNootkan()
    
    num_rows = len(P)
    num_cols = len(P[0])
    for i in range(num_rows):
        for j in range(num_cols):
            P[i][j][0] *= scale[0]
            P[i][j][1] *= scale[1]
            P[i][j][2] *= scale[2]

            


    XX, YY, ZZ = bs.GetSurface(P,U,V, resolution)
    return XX, YY, ZZ    


def GetCanoeNootkan():
    """
    Nootkan Style Canoe
    
    returns the P, U, V arrays for the bs.GetSurface method
    """
    P =	[
        [[0.031,0.000,0.048],[0.031,0.000,0.048],[0.795,0.000,0.003],[3.648,0.000,0.003],[6.581,-0.000,0.031],[7.217,-0.000,0.387],[7.687,-0.000,0.898]],
        [[-0.011,0.000,0.558],[-0.011,-0.070,0.558],[0.811,-0.292,0.440],[3.623,-0.625,0.438],[5.786,-0.450,0.522],[7.041,-0.185,0.717],[7.666,-0.087,1.135]]
        ]

    V =	[
        [[[-0.000,0.000,0.000],[0.000,0.000,0.000]],[[0.274,0.000,-0.033],[-0.210,0.000,0.000]],[[0.193,0.000,-0.000],[-1.365,0.000,0.003]],[[1.259,0.000,-0.002],[-0.584,0.000,-0.017]],[[0.539,-0.000,0.015],[-0.208,0.000,-0.316]],[[0.192,-0.000,0.291],[-0.135,0.000,-0.098]]],
        [[[-0.003,-0.029,0.000],[-0.001,0.039,0.001]],[[0.379,0.023,-0.057],[-0.520,0.113,0.023]],[[0.588,-0.128,-0.026],[-1.153,-0.004,-0.021]],[[0.787,0.003,0.014],[-0.832,-0.135,-0.066]],[[0.928,0.150,0.073],[-0.177,-0.049,-0.060]],[[0.331,0.091,0.112],[-0.104,0.000,-0.162]]]
        ]

    U =	[
        [[[-0.019,-0.034,0.142],[-0.013,-0.002,-0.161]],[[0.000,0.000,0.131],[-0.018,0.002,-0.174]],[[0.003,-0.114,0.000],[0.000,0.206,-0.274]],[[-0.016,-0.393,0.000],[0.010,0.332,-0.432]],[[-0.440,-0.176,0.204],[0.056,0.109,-0.093]],[[-0.039,-0.029,0.061],[0.047,0.086,-0.071]],[[-0.005,-0.020,0.087],[0.007,0.024,-0.069]]]
        ]
    return P, V, U

def GetCanoeHaida():
    """
    Haida Style Canoe
    
    returns the P, U, V arrays for the bs.GetSurface method
    """
    P =	[
        [[0.034,-0.000,0.583],[0.086,-0.000,0.532],[0.641,0.000,0.040],[2.884,0.000,0.007],[5.196,0.000,0.026],[5.220,0.000,0.285],[6.348,-0.000,0.621],[6.375,-0.000,0.630]],
        [[0.017,-0.000,0.675],[0.042,-0.029,0.646],[0.884,-0.178,0.269],[2.885,-0.425,0.145],[4.894,-0.201,0.244],[5.201,-0.177,0.435],[6.356,-0.026,0.731],[6.370,-0.000,0.736]],
        [[0.000,-0.000,0.766],[-0.000,-0.043,0.766],[1.156,-0.425,0.512],[2.884,-0.520,0.450],[4.383,-0.476,0.505],[5.146,-0.364,0.610],[6.365,-0.053,0.841],[6.365,-0.000,0.841]]
        ]

    V =	[
        [[[0.020,0.000,-0.020],[-0.021,-0.000,0.020]],[[0.105,0.000,-0.098],[-0.093,-0.000,0.081]],[[0.396,-0.000,-0.048],[-0.368,0.000,0.000]],[[0.777,0.000,0.000],[-0.672,-0.000,-0.009]],[[0.010,-0.000,0.134],[-0.011,0.000,-0.110]],[[0.386,-0.000,0.097],[-0.052,-0.000,-0.016]],[[0.010,0.000,0.003],[-0.010,-0.000,-0.003]]],
        [[[0.010,-0.012,-0.011],[-0.010,0.014,0.011]],[[0.070,-0.038,-0.049],[-0.222,0.088,0.052]],[[0.479,-0.190,-0.112],[-0.998,0.006,0.006]],[[1.001,-0.006,-0.006],[-0.369,-0.080,-0.183]],[[0.124,0.027,0.062],[-0.093,-0.007,-0.039]],[[0.432,0.033,0.181],[-0.088,-0.032,-0.010]],[[0.005,0.009,0.003],[0.000,-0.010,-0.002]]],
        [[[0.000,-0.014,0.000],[0.000,0.014,0.000]],[[0.604,-0.178,-0.148],[-0.202,0.026,0.030]],[[0.603,-0.078,-0.090],[-0.368,-0.002,0.000]],[[0.777,0.004,0.000],[-0.223,-0.017,-0.031]],[[0.468,0.035,0.066],[-0.294,-0.059,-0.048]],[[0.483,0.097,0.079],[-0.088,-0.021,-0.018]],[[-0.000,0.019,0.000],[0.000,-0.021,0.000]]]
        ]

    U =	[
        [[[-0.006,0.000,0.030],[0.006,-0.000,-0.030]],[[-0.016,-0.017,0.035],[0.014,0.005,-0.040]],[[0.085,-0.048,0.095],[-0.082,0.116,-0.067]],[[0.000,-0.274,0.000],[-0.001,0.117,-0.160]],[[0.000,-0.073,0.000],[0.118,0.199,-0.071]],[[0.000,-0.063,0.000],[0.014,0.093,-0.068]],[[0.003,-0.009,0.037],[-0.003,0.009,-0.037]],[[-0.002,-0.000,0.035],[0.002,0.000,-0.035]]],
        [[[-0.006,0.000,0.030],[0.006,-0.000,-0.030]],[[-0.014,-0.005,0.040],[0.014,0.005,-0.040]],[[0.073,-0.105,0.060],[-0.113,0.003,-0.126]],[[0.001,-0.063,0.086],[0.000,0.010,-0.123]],[[-0.172,-0.289,0.103],[0.163,0.001,-0.067]],[[-0.013,-0.084,0.061],[0.022,0.005,-0.079]],[[0.003,-0.009,0.037],[-0.003,0.009,-0.037]],[[-0.002,-0.000,0.035],[0.002,0.000,-0.035]]]
        ]
    return P, V, U

def GetCanoeKutenai():
    P =	[
        [[0.001,0.000,0.013],[1.231,0.000,0.027],[2.337,0.000,0.022],[3.442,0.000,0.027],[4.672,0.000,0.013]],
        [[0.446,0.000,0.192],[1.143,-0.174,0.151],[2.337,-0.272,0.148],[3.530,-0.174,0.151],[4.228,0.000,0.192]],
        [[0.814,0.000,0.376],[1.447,-0.216,0.335],[2.336,-0.314,0.332],[3.227,-0.216,0.335],[3.859,0.000,0.376]]
        ]

    V =	[
        [[[0.430,-0.000,-0.021],[-0.265,-0.000,-0.002]],[[0.265,0.000,0.002],[-0.433,0.000,0.000]],[[0.433,0.000,0.000],[-0.265,0.000,0.002]],[[0.265,-0.000,-0.002],[-0.430,-0.000,-0.021]]],
        [[[0.251,-0.072,-0.016],[-0.257,0.046,0.008]],[[0.251,-0.045,-0.008],[-0.263,0.000,0.000]],[[0.263,0.000,0.000],[-0.251,-0.045,-0.008]],[[0.257,0.046,0.008],[-0.251,-0.072,-0.016]]],
        [[[0.243,-0.094,-0.016],[-0.255,0.057,0.008]],[[0.248,-0.055,-0.008],[-0.263,0.000,0.000]],[[0.263,0.000,0.000],[-0.248,-0.055,-0.008]],[[0.255,0.057,0.008],[-0.243,-0.094,-0.016]]]
        ]

    U =	[
        [[[0.193,-0.000,0.073],[-0.108,0.000,-0.045]],[[-0.045,-0.088,0.001],[-0.021,0.011,-0.058]],[[0.000,-0.170,0.000],[0.007,0.023,-0.053]],[[0.045,-0.088,0.001],[0.021,0.011,-0.058]],[[-0.193,-0.000,0.073],[0.108,0.000,-0.045]]],
        [[[0.108,0.000,0.045],[-0.131,0.000,-0.076]],[[0.021,-0.011,0.056],[-0.117,-0.026,-0.050]],[[-0.007,-0.023,0.053],[0.000,0.006,-0.073]],[[-0.021,-0.011,0.056],[0.117,-0.026,-0.050]],[[-0.108,0.000,0.045],[0.131,0.000,-0.076]]]
        ]
        
    return P, V, U