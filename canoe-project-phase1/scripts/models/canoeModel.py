import scripts.BezierSurface as bs

def GetCanoe(ideal_length, ideal_width, ideal_height, canoe_type, resolution):
    inputArgs = {"ideal_length":ideal_length, "ideal_width":ideal_width, "ideal_height":ideal_height, "onlyDimensions":False}

    if   (canoe_type == 1):
        P, V, U = GetCanoeNootkan(**inputArgs)
    elif (canoe_type == 2):
        P, V, U = GetCanoeHaida(**inputArgs)
    elif (canoe_type == 3):
        P, V, U = GetCanoeKutenai(**inputArgs)
    else:
        P, V, U = GetCanoeNootkan(**inputArgs)

    XX, YY, ZZ = bs.GetSurface(P,U,V, resolution)
    return XX, YY, ZZ   

def ScaleArray(A, scale):
    num_rows = len(A)
    num_cols = len(A[0])
    for i in range(num_rows):
        for j in range(num_cols):
            A[i][j][0] *= scale[0]
            A[i][j][1] *= scale[1]
            A[i][j][2] *= scale[2]
    return A

def ScaleSpecialArray(A, scale):
    num_rows = len(A)
    num_cols = len(A[0])
    num_inner = len(A[0][0])
    for i in range(num_rows):
        for j in range(num_cols):
            for k in range(num_inner):
                A[i][j][k][0] *= scale[0]
                A[i][j][k][1] *= scale[1]
                A[i][j][k][2] *= scale[2]
    return A

def GetCanoeNootkan(ideal_length, ideal_width, ideal_height, onlyDimensions):
    """
    Nootkan Style Canoe
    
    returns the P, U, V arrays for the bs.GetSurface method
    """
    #units in metric
    length = 7.687
    width = 1.249
    height = 1.135
    if(onlyDimensions):
        return [length,width,height]
    scale = [ideal_length / length, ideal_width  / width, ideal_height / height]

    P =	[
        [[0.031,0.000,0.048],[0.031,0.000,0.048],[0.795,0.000,0.003],[3.648,0.000,0.003],[6.581,-0.000,0.031],[7.217,-0.000,0.387],[7.687,-0.000,0.898]],
        [[-0.011,0.000,0.558],[-0.011,-0.070,0.558],[0.811,-0.292,0.440],[3.623,-0.625,0.438],[5.786,-0.450,0.522],[7.041,-0.185,0.717],[7.666,-0.087,1.135]]
        ]

    V =	[
        [[[-0.000,0.000,0.000],[0.000,0.000,0.000]],[[0.274,0.000,-0.033],[-0.210,0.000,0.000]],[[0.193,0.000,-0.000],[-1.365,0.000,0.003]],[[1.259,0.000,-0.002],[-0.584,0.000,-0.017]],[[0.539,-0.000,0.015],[-0.208,0.000,-0.316]],[[0.192,-0.000,0.291],[-0.135,0.000,-0.098]]],
        [[[-0.003,-0.029,0.000],[-0.001,0.039,0.001]],[[0.379,0.023,-0.057],[-0.520,0.113,0.023]],[[0.588,-0.128,-0.026],[-1.153,-0.004,-0.021]],[[0.787,0.003,0.014],[-0.832,-0.135,-0.066]],[[0.928,0.150,0.073],[-0.177,-0.049,-0.060]],[[0.331,0.091,0.112],[-0.104,0.000,-0.162]]]
        ]

    U =	[
        [[[-0.019,-0.034,0.142],[-0.013,-0.002,-0.161]],[[0.000,0.000,0.131],[-0.018,0.002,-0.174]],[[0.003,-0.114,0.000],[0.000,0.206,-0.274]],[[-0.016,-0.393,0.000],[0.010,0.332,-0.432]],[[-0.440,-0.176,0.204],[0.056,0.109,-0.093]],[[-0.039,-0.029,0.061],[0.047,0.086,-0.071]],[[-0.005,-0.020,0.087],[0.007,0.024,-0.069]]]
        ]

    P = ScaleArray(P, scale)
    V = ScaleSpecialArray(V, scale)
    U = ScaleSpecialArray(U, scale)
    return P, V, U

def GetCanoeHaida(ideal_length, ideal_width, ideal_height, onlyDimensions):
    """
    Haida Style Canoe
    
    returns the P, U, V arrays for the bs.GetSurface method
    """
    #units in metric
    length = 6.376
    width = 0.999
    height = 0.838
    if(onlyDimensions):
        return [length,width,height]
    scale = [ideal_length / length, ideal_width  / width, ideal_height / height]

    P =	[
        [[0.042,-0.000,0.572],[0.070,0.000,0.547],[0.659,0.000,0.030],[2.703,0.000,-0.005],[5.196,0.000,0.028],[5.215,-0.000,0.279],[6.352,0.000,0.623],[6.376,-0.000,0.626]],
        [[0.021,-0.000,0.666],[0.035,0.023,0.653],[0.865,0.165,0.267],[2.670,0.428,0.125],[4.660,0.230,0.150],[5.186,0.226,0.456],[6.360,0.026,0.730],[6.372,-0.000,0.732]],
        [[0.000,-0.000,0.759],[0.000,0.047,0.759],[0.859,0.333,0.561],[2.654,0.499,0.439],[4.383,0.472,0.507],[5.154,0.360,0.607],[6.368,0.053,0.838],[6.368,0.000,0.838]]
        ]

    V =	[
        [[[0.011,0.000,-0.010],[-0.011,-0.000,0.010]],[[0.055,0.000,-0.049],[-0.252,-0.000,0.210]],[[0.800,-0.000,-0.032],[-0.728,0.000,0.009]],[[0.728,0.000,-0.009],[-1.059,-0.000,-0.027]],[[0.013,-0.000,0.141],[-0.011,0.000,-0.140]],[[0.317,-0.000,0.070],[-0.045,0.000,-0.010]],[[0.009,-0.000,0.002],[-0.004,0.000,0.000]]],
        [[[0.005,0.009,-0.005],[-0.005,-0.009,0.005]],[[0.331,0.066,-0.156],[-0.353,-0.053,0.169]],[[0.679,0.293,-0.183],[-0.714,-0.016,-0.012]],[[0.781,0.017,0.013],[-0.300,0.175,-0.065]],[[0.201,-0.118,0.044],[-0.205,0.037,-0.115]],[[0.276,-0.104,0.080],[-0.335,0.067,-0.074]],[[0.006,-0.012,0.004],[-0.005,0.010,-0.001]]],
        [[[0.000,0.010,0.000],[-0.000,-0.018,0.000]],[[0.346,0.111,-0.073],[-0.348,-0.086,0.051]],[[0.677,0.168,-0.100],[-0.728,0.000,0.009]],[[0.728,0.000,-0.009],[-0.408,0.031,-0.039]],[[0.408,-0.031,0.039],[-0.287,0.071,-0.051]],[[0.287,-0.071,0.051],[-0.590,0.134,-0.113]],[[0.001,-0.022,0.000],[0.000,0.012,0.000]]]
        ]

    U =	[
        [[[-0.008,-0.000,0.037],[0.008,0.000,-0.037]],[[-0.014,0.009,0.041],[0.014,-0.009,-0.041]],[[0.117,0.013,0.097],[-0.016,-0.055,-0.078]],[[-0.019,0.257,0.001],[0.005,-0.055,-0.081]],[[-0.169,0.030,0.118],[0.117,-0.121,-0.044]],[[-0.001,0.084,0.046],[0.011,-0.080,-0.051]],[[0.003,0.010,0.042],[-0.003,-0.010,-0.042]],[[-0.001,0.000,0.041],[0.001,-0.000,-0.041]]],
        [[[-0.008,-0.000,0.037],[0.008,0.000,-0.037]],[[-0.014,0.009,0.041],[0.014,-0.009,-0.041]],[[0.016,0.055,0.078],[0.008,0.002,-0.128]],[[-0.005,0.055,0.081],[0.009,-0.021,-0.120]],[[-0.117,0.121,0.044],[0.132,0.031,-0.192]],[[-0.011,0.080,0.051],[0.009,0.009,-0.033]],[[0.003,0.010,0.042],[-0.003,-0.010,-0.042]],[[-0.001,0.000,0.041],[0.001,-0.000,-0.041]]]
        ]

    P = ScaleArray(P, scale)
    V = ScaleSpecialArray(V, scale)
    U = ScaleSpecialArray(U, scale)
    return P, V, U

def GetCanoeKutenai(ideal_length, ideal_width, ideal_height, onlyDimensions):
    """
    Kutenai Style Canoe
    
    returns the P, U, V arrays for the bs.GetSurface method
    """
    #units in metric
    length = 4.672
    width = 0.628
    height = 0.376
    if(onlyDimensions):
        return [length,width,height]
    scale = [ideal_length / length, ideal_width  / width, ideal_height / height]

    P =	[
        [[0.001,0.000,0.013],[1.231,0.000,0.027],[2.337,0.000,0.022],[3.442,0.000,0.027],[4.672,0.000,0.013]],
        [[0.446,0.000,0.192],[1.143,-0.174,0.151],[2.337,-0.272,0.148],[3.530,-0.174,0.151],[4.228,0.000,0.192]],
        [[0.814,0.000,0.376],[1.447,-0.216,0.335],[2.336,-0.314,0.332],[3.227,-0.216,0.335],[3.859,0.000,0.376]]
        ]

    V =	[
        [[[0.430,-0.000,-0.021],[-0.265,-0.000,-0.002]],[[0.265,0.000,0.002],[-0.433,0.000,0.000]],[[0.433,0.000,0.000],[-0.265,0.000,0.002]],[[0.265,-0.000,-0.002],[-0.430,-0.000,-0.021]]],
        [[[0.251,-0.072,-0.016],[-0.257,0.046,0.008]],[[0.251,-0.045,-0.008],[-0.263,0.000,0.000]],[[0.263,0.000,0.000],[-0.251,-0.045,-0.008]],[[0.257,0.046,0.008],[-0.251,-0.072,-0.016]]],
        [[[0.243,-0.094,-0.016],[-0.255,0.057,0.008]],[[0.248,-0.055,-0.008],[-0.263,0.000,0.000]],[[0.263,0.000,0.000],[-0.248,-0.055,-0.008]],[[0.255,0.057,0.008],[-0.243,-0.094,-0.016]]]
        ]

    U =	[
        [[[0.193,-0.000,0.073],[-0.108,0.000,-0.045]],[[-0.045,-0.088,0.001],[-0.021,0.011,-0.058]],[[0.000,-0.170,0.000],[0.007,0.023,-0.053]],[[0.045,-0.088,0.001],[0.021,0.011,-0.058]],[[-0.193,-0.000,0.073],[0.108,0.000,-0.045]]],
        [[[0.108,0.000,0.045],[-0.131,0.000,-0.076]],[[0.021,-0.011,0.056],[-0.117,-0.026,-0.050]],[[-0.007,-0.023,0.053],[0.000,0.006,-0.073]],[[-0.021,-0.011,0.056],[0.117,-0.026,-0.050]],[[-0.108,0.000,0.045],[0.131,0.000,-0.076]]]
        ]

    P = ScaleArray(P, scale)
    V = ScaleSpecialArray(V, scale)
    U = ScaleSpecialArray(U, scale)
        
    return P, V, U