import scripts.BezierSurface as bs

def GetCanoe(scale, canoe_type, resolution):
    if   (canoe_type == 1):
        P, V, U = GetCanoeNootkan()
    elif (canoe_type == 2):
        P, V, U = GetCanoeHaida()
    elif (canoe_type == 3):
        P, V, U = GetCanoeKutenai()
    else:
        P, V, U = GetCanoeNootkan()
    
    num_rows = len(P)
    num_cols = len(P[0])
    for i in range(num_rows):
        for j in range(num_cols):
            P[i][j][0] *= scale[0]
            P[i][j][1] *= scale[1]
            P[i][j][2] *= scale[2]

            


    XX, YY, ZZ = bs.GetSurface(P,U,V, resolution)
    return XX, YY, ZZ    


def GetCanoeNootkan():
    """
    Nootkan Style Canoe
    
    returns the P, U, V arrays for the bs.GetSurface method
    """
    P =	[
        [[0.031,0.000,0.048],[0.795,0.000,0.003],[3.648,0.000,0.003],[6.581,-0.000,0.031],[7.217,-0.000,0.387],[7.687,-0.000,0.898]],
        [[-0.011,-0.070,0.558],[0.811,-0.292,0.440],[3.623,-0.625,0.438],[5.786,-0.450,0.522],[7.041,-0.185,0.717],[7.666,-0.087,1.135]]
        ]

    V =	[
        [[[0.274,0.000,-0.033],[-0.210,0.000,0.000]],[[0.193,0.000,-0.000],[-1.365,0.000,0.003]],[[1.259,0.000,-0.002],[-0.584,0.000,-0.017]],[[0.539,-0.000,0.015],[-0.208,0.000,-0.316]],[[0.192,-0.000,0.291],[-0.135,0.000,-0.098]]],
        [[[0.379,0.023,-0.057],[-0.520,0.113,0.023]],[[0.588,-0.128,-0.026],[-1.153,-0.004,-0.021]],[[0.787,0.003,0.014],[-0.832,-0.135,-0.066]],[[0.928,0.150,0.073],[-0.177,-0.049,-0.060]],[[0.331,0.091,0.112],[-0.104,0.000,-0.162]]]
        ]

    U =	[
        [[[-0.019,-0.034,0.142],[-0.013,-0.002,-0.161]],[[0.003,-0.114,0.000],[0.000,0.206,-0.274]],[[-0.016,-0.393,0.000],[0.010,0.332,-0.432]],[[-0.440,-0.176,0.204],[0.056,0.109,-0.093]],[[-0.039,-0.029,0.061],[0.047,0.086,-0.071]],[[-0.005,-0.020,0.087],[0.007,0.024,-0.069]]]
        ]
    return P, V, U

def GetCanoeHaida():
    """
    Haida Style Canoe
    
    returns the P, U, V arrays for the bs.GetSurface method
    """
    P =	[
        [[0.050,0.000,0.577],[0.690,0.000,0.039],[1.743,0.000,0.007],[3.184,0.000,-0.005],[4.221,0.000,0.007],[5.222,0.000,0.038],[5.329,0.000,0.268],[6.441,-0.000,0.635]],
        [[0.015,-0.000,0.677],[0.848,-0.212,0.338],[1.743,-0.327,0.098],[3.108,-0.377,0.077],[4.216,-0.384,0.127],[5.077,-0.192,0.323],[5.598,-0.115,0.521],[6.434,-0.000,0.746]],
        [[0.007,0.000,0.772],[0.977,-0.364,0.546],[1.735,-0.476,0.477],[2.975,-0.511,0.452],[4.214,-0.507,0.483],[5.034,-0.425,0.580],[5.808,-0.195,0.728],[6.427,0.000,0.848]]
        ]

    V =	[
        [[[0.333,-0.000,-0.291],[-0.143,-0.000,0.059]],[[0.270,0.000,-0.032],[-0.471,0.000,0.005]],[[0.471,-0.000,-0.005],[-0.316,-0.000,-0.000]],[[0.316,0.000,0.000],[-0.471,0.000,-0.007]],[[0.476,-0.000,0.007],[-0.280,0.000,-0.010]],[[0.065,-0.000,0.183],[-0.034,-0.000,-0.074]],[[0.164,0.000,0.092],[-0.579,0.000,-0.201]]],
        [[[0.019,-0.010,-0.022],[-0.182,0.039,0.065]],[[0.182,-0.039,-0.065],[-0.331,0.010,0.019]],[[0.331,-0.010,-0.019],[-0.554,0.004,-0.001]],[[0.554,-0.004,0.001],[-0.326,-0.030,-0.043]],[[0.326,0.030,0.043],[-0.087,-0.006,-0.066]],[[0.087,0.006,0.066],[-0.216,-0.029,-0.052]],[[0.699,0.094,0.167],[0.000,-0.066,0.000]]],
        [[[-0.000,-0.061,0.000],[-0.900,0.298,0.211]],[[0.244,-0.081,-0.057],[-0.269,0.014,0.013]],[[0.269,-0.014,-0.013],[-0.485,0.007,0.001]],[[0.485,-0.007,-0.001],[-0.269,-0.011,-0.024]],[[0.538,0.023,0.047],[-0.257,-0.043,-0.041]],[[0.128,0.022,0.020],[-0.245,-0.049,-0.047]],[[0.587,0.116,0.112],[0.001,-0.062,0.000]]]
        ]

    U =	[
        [[[-0.016,0.000,0.035],[0.007,0.000,-0.030]],[[0.075,-0.042,0.141],[-0.039,0.080,-0.070]],[[-0.003,-0.108,0.000],[-0.001,0.095,-0.068]],[[-0.011,-0.158,0.000],[0.037,0.089,-0.064]],[[-0.001,-0.045,0.000],[0.003,0.097,-0.134]],[[-0.105,-0.040,0.129],[0.012,0.079,-0.075]],[[0.094,-0.043,0.087],[-0.082,0.033,-0.078]],[[-0.002,-0.000,0.038],[0.002,0.000,-0.034]]],
        [[[-0.007,-0.000,0.030],[-0.002,0.000,-0.039]],[[0.039,-0.080,0.070],[-0.056,0.003,-0.087]],[[0.001,-0.095,0.068],[0.008,-0.010,-0.199]],[[-0.037,-0.089,0.064],[0.048,-0.004,-0.202]],[[-0.002,-0.067,0.092],[0.003,0.011,-0.266]],[[-0.012,-0.079,0.075],[0.037,0.069,-0.116]],[[0.082,-0.033,0.078],[-0.056,0.019,-0.062]],[[-0.002,0.000,0.034],[0.003,0.000,-0.038]]]
        ]
    return P, V, U

def GetCanoeKutenai():
    P =	[
        [[0.001,0.000,0.013],[1.231,0.000,0.027],[2.337,0.000,0.022],[3.442,0.000,0.027],[4.672,0.000,0.013]],
        [[0.446,0.000,0.192],[1.143,-0.174,0.151],[2.337,-0.272,0.148],[3.530,-0.174,0.151],[4.228,0.000,0.192]],
        [[0.814,0.000,0.376],[1.447,-0.216,0.335],[2.336,-0.314,0.332],[3.227,-0.216,0.335],[3.859,0.000,0.376]]
        ]

    V =	[
        [[[0.430,-0.000,-0.021],[-0.265,-0.000,-0.002]],[[0.265,0.000,0.002],[-0.433,0.000,0.000]],[[0.433,0.000,0.000],[-0.265,0.000,0.002]],[[0.265,-0.000,-0.002],[-0.430,-0.000,-0.021]]],
        [[[0.251,-0.072,-0.016],[-0.257,0.046,0.008]],[[0.251,-0.045,-0.008],[-0.263,0.000,0.000]],[[0.263,0.000,0.000],[-0.251,-0.045,-0.008]],[[0.257,0.046,0.008],[-0.251,-0.072,-0.016]]],
        [[[0.243,-0.094,-0.016],[-0.255,0.057,0.008]],[[0.248,-0.055,-0.008],[-0.263,0.000,0.000]],[[0.263,0.000,0.000],[-0.248,-0.055,-0.008]],[[0.255,0.057,0.008],[-0.243,-0.094,-0.016]]]
        ]

    U =	[
        [[[0.193,-0.000,0.073],[-0.108,0.000,-0.045]],[[-0.045,-0.088,0.001],[-0.021,0.011,-0.058]],[[0.000,-0.170,0.000],[0.007,0.023,-0.053]],[[0.045,-0.088,0.001],[0.021,0.011,-0.058]],[[-0.193,-0.000,0.073],[0.108,0.000,-0.045]]],
        [[[0.108,0.000,0.045],[-0.131,0.000,-0.076]],[[0.021,-0.011,0.056],[-0.117,-0.026,-0.050]],[[-0.007,-0.023,0.053],[0.000,0.006,-0.073]],[[-0.021,-0.011,0.056],[0.117,-0.026,-0.050]],[[-0.108,0.000,0.045],[0.131,0.000,-0.076]]]
        ]
        
    return P, V, U